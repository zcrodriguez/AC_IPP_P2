import dash
from dash import html, dcc, Input, Output
import dash_bootstrap_components as dbc
from dash_bootstrap_templates import load_figure_template
import plotly.graph_objects as go
import json
import pickle
from pgmpy.inference import VariableElimination
from dash.exceptions import PreventUpdate

templates = ["minty"]
load_figure_template(templates)

# Registrar la página
dash.register_page(__name__, path='/')



# ======================================================================================================================
#                                   CARGA DE DATOS, MODELOS Y DESCARGO DE RESPONSABILIDAD             
# ======================================================================================================================

# Cargar el archivo JSON
try:
    with open('assets/parameter_options.JSON', 'r', encoding='utf-8') as json_file:
        all_params = json.load(json_file)
except FileNotFoundError:
    print("El archivo JSON no se encontró.")
except json.JSONDecodeError:
    print("Error al decodificar el archivo JSON.")
    all_params = {}

# Extraer solo los parámetros de los dropdowns
dd_params = all_params.get('dropdown_params', {})

# Obtener el diccionario de correspondencias
param_name_mapping = all_params.get('param_name_mapping', {})

# Cargar modelo entrenado desde el archivo
try:
    with open('assets/modelo_entrenado.pkl', 'rb') as f:
        loaded_model = pickle.load(f)
except FileNotFoundError:
    print("El archivo del modelo no se encontró.")
except pickle.UnpicklingError:
    print("Error al cargar el modelo.")
    loaded_model = None

# Crea un objeto de inferencia
infer = VariableElimination(loaded_model)

disclaimer = """
DISCLAIMER: This application is based on real data from the Polytechnic Institute of Portalegre, 
but it is a purely academic exercise. The results generated by this application do not represent 
the views, opinions, or policies of the Polytechnic Institute of Portalegre or any other institution.
"""



# ======================================================================================================================
#                                               FUNCIONES AUXILIARES
# ======================================================================================================================

# Función para crear un menú desplegable de Bootstrap
def create_dd(id, label, options, placeholder, width=12, optionHeight=35):
    """
    Crea un menú desplegable de Bootstrap.

    Args:
        id (str): Identificador del menú desplegable.
        label (str): Etiqueta del menú desplegable.
        options (list): Opciones del menú desplegable. Cada opción es un diccionario con las claves 'label' y 'value'.
        placeholder (str): Placeholder del menú desplegable.
        width (int, optional): Ancho del menú desplegable. Defaults to 12.
        optionHeight (int, optional): Altura de las opciones del menú desplegable. Defaults to 35.
    
    Returns:
        dbc.Col: Menú desplegable de Bootstrap.
    """
    return dbc.Col([
        dbc.Label(label, html_for=id, size="sm"),
        dcc.Dropdown(id=id, 
            options=options,
            placeholder=placeholder,
            optionHeight=optionHeight,
            persistence=True  # Habilitar la persistencia para mantener el estado
        ),
    ], width=width)

# Función para crear un botón de información de Bootstrap
def create_info_btn(button_id, width=1):
    """
    Crea un botón de información de Bootstrap.

    Args:
        button_id (str): Identificador del botón.
        width (int, optional): Ancho del botón. Defaults to 1.

    Returns:
        dbc.Col: Botón de información de Bootstrap.
    """
    return dbc.Col([
        html.Button("ℹ️", id=button_id, className="btn btn-info", style={'float': 'right'}),
        dbc.Popover(
            [
                dbc.PopoverHeader("Input Requirements"),
                dbc.PopoverBody("Please provide values for both 'Approved Credits' and 'Enrolled Credits' to have them factored into the model."),
            ],
            id=f"popover-{button_id}",
            target=button_id,
            trigger="hover",
        ),
    ], width=width)

# Función para calcular la etiqueta de créditos a partir de la razón de créditos aprobados sobre inscritos
def calculate_credit_label(credits_ratio):
    """
    Calcula la etiqueta de créditos a partir de la razón de créditos aprobados sobre inscritos.

    Args:
        credits_ratio (float): Ratio de créditos aprobados sobre inscritos.

    Returns:
        str: Etiqueta de créditos.
    """
    credit_label_ranges = all_params.get('credit_label_ranges', [])

    if credits_ratio == 1:
        return 11
    
    for item in credit_label_ranges:
        start, end, label = item.get('start', 0), item.get('end', 0), item.get('label', '')

        if start <= credits_ratio < end:
            return label

    return None

# Función para calcular la razón de créditos aprobados sobre inscritos y mostrar un mensaje de error si es necesario
def calculate_ratio_and_errors(acu, ecu, evidence, error_message, error_open, evidence_key):
    """
    Calcula la razón de créditos aprobados sobre inscritos y muestra un mensaje de error si es necesario.

    Args:
        acu (int): Créditos aprobados.
        ecu (int): Créditos inscritos.
        evidence (dict): Diccionario de evidencias.
        error_message (str): Mensaje de error.
        error_open (bool): Indicador de mensaje de error abierto.
        evidence_key (str): Clave de la evidencia.

    Returns:
        tuple: Tupla con el mensaje de error y el indicador de mensaje de error abierto.
    """
    if acu is not None and ecu is not None and ecu != 0:
        if acu > ecu:
            error_open = True
            error_message = "Approved credits cannot be greater than enrolled credits!"
        else:
            error_open = False
            error_message = ""
            evidence[evidence_key] = calculate_credit_label(acu / ecu)
    return error_message, error_open

# Función para validar los inputs de créditos
def validate_credit_inputs(aprobadas, inscritas):
    """
    Valida los inputs de créditos.

    Args:
        aprobadas (int): Créditos aprobados.
        inscritas (int): Créditos inscritos.

    Returns:
        tuple: Tupla con los resultados de validación e información de retroalimentación.
    """
    is_invalid_aprobadas = not isinstance(aprobadas, int) or aprobadas < 0 or aprobadas > 26
    feedback_aprobadas = "Value must be an integer between 0 and 26." if is_invalid_aprobadas else ""

    is_invalid_inscritas = not isinstance(inscritas, int) or inscritas < 0 or inscritas > 26
    feedback_inscritas = "Value must be an integer between 0 and 26." if is_invalid_inscritas else ""

    return is_invalid_aprobadas, feedback_aprobadas, is_invalid_inscritas, feedback_inscritas



# ======================================================================================================================
#                                               CONTENIDO DE LA PÁGINA
# ======================================================================================================================

layout = html.Div([

    # ------------------------------------------------------------------------------------------------------------------
    #                                           PANEL DE LA IZQUIERDA: FORMULARIO
    # ------------------------------------------------------------------------------------------------------------------
    html.Div([

        # Título del formulario
        html.H3([
            "Parameters of the model ",
            dbc.Badge("ℹ️", id="info-badge", color="primary", className="ml-2", style={'margin-left': '10px'}),
            dbc.Popover(
                [
                    dbc.PopoverHeader("How to Use"),
                    dbc.PopoverBody(
                        "Choose the parameters you wish to use for the prediction. "
                        "Providing more information by selecting additional parameters "
                        "will enhance the accuracy of the prediction!"
                    ),
                ],
                id="info-popover",
                target="info-badge",
                trigger="hover",
            ),
        ]),

        # Fila 1: Botón para limpiar el formulario y barra de progreso
        dbc.Row([

            # Botón para limpiar el formulario
            dbc.Col([
                dbc.Button("🧹Clear Form", id="clear-button", color="secondary", className="mr-1"),
            ], width=4, style={'margin-bottom': '10px', 'margin-top': '12px'}),

            # Barra de progreso
            dbc.Col([
                dbc.Label("Form Completion Progress", html_for="progress-bar", size="sm"),
                dbc.Progress(id="progress-bar", value=0, striped=True, animated=False, style={'height': '25px'}),
            ], width=8, style={'margin-bottom': '10px'}),
            
        ], justify="center", style={'margin-bottom': '10px'}),
        html.Div(style={'margin-bottom': '10px'}),
        
        # ACORDEÓN DE MENÚS DESPLEGABLES
        dbc.Accordion([
            
            # Menú desplegable 1: Demographic data
            dbc.AccordionItem([

                        # Fila 1
                        dbc.Row([

                            # Gender
                            create_dd('dd_gender', 'Gender', dd_params['gender'], 'Gender', 6),

                            # Age at enrollment
                            create_dd('dd_age_at_enrollment', 'Age at enrollment', dd_params['age_at_enrollment'], 'Age at enrollment', 6),

                        ],style={'margin-bottom': '5px'}),

                    ], title='Demographic data'
                ),

                # Menú desplegable 2: Socioeconomic data
                dbc.AccordionItem(
                    [
                        # Fila 1
                        dbc.Row([

                            # Occupation of financial responsible party (occup_fin_res_party)
                            create_dd('dd_occup_fin_res_party', 'Occupation of financial responsible party', dd_params['occup_fin_res_party'], 'Occupation of financial responsible party', 12, 55),

                        ],style={'margin-bottom': '5px'}),

                        # Fila 2
                        dbc.Row([
                           
                            # Debtor
                            create_dd('dd_debtor', 'Debtor', dd_params['debtor'], 'Debtor', 6),

                            # Scholarship holder (scholarship)
                            create_dd('dd_scholarship', 'Scholarship holder', dd_params['scholarship'], 'Scholarship holder', 6),

                        ],style={'margin-bottom': '5px'}),

                    ],
                    title='Socioeconomic data'
                ),

                # Menú desplegable 3: Academic data at enrollment
                    dbc.AccordionItem(
                        [
                            # Fila 1
                            dbc.Row([

                                # Course
                                create_dd('dd_course', 'Course', dd_params['course'], 'Course'),

                            ],style={'margin-bottom': '5px'}),

                            # Fila 2
                            dbc.Row([

                                # Admission grade
                                create_dd('dd_admission_grade', 'Admission grade', dd_params['admission_grade'], 'Admission grade'),

                            ],style={'margin-bottom': '5px'}),
                                
                        ],
                        title='Academic data at enrollment'
                    ),

                    # Menú desplegable 4: Academic data at the end of 1st sem
                    dbc.AccordionItem(
                        [
                            # Fila 1
                            dbc.Row([

                                # Approved curricular units
                                dbc.Col([
                                        dbc.Label("Approved credits", html_for="acu_1st_sem", size="sm"),
                                        dbc.Input(id="acu_1st_sem", type="number", min=0, max=26, step=1, value=0, size="sm", persistence=True),
                                        dbc.FormFeedback("", type="invalid", id="acu_1st_sem_fb"),
                                    ], width=5,
                                ),

                                # Enrolled curricular units
                                dbc.Col([
                                        dbc.Label("Enrolled credits", html_for="ecu_1st_sem", size="sm"),
                                        dbc.Input(id="ecu_1st_sem", type="number", min=0, max=26, step=1, value=0, size="sm", persistence=True),
                                        dbc.FormFeedback("", type="invalid", id="ecu_1st_sem_fb"),
                                    ], width=5,
                                ),

                                # Botón info
                                create_info_btn('1st_sem_btn'),

                            ], justify="between", style={'margin-bottom': '5px'}),

                            # Fila 2
                            dbc.Row([

                                dbc.Alert(id="error-message-uc1", color="danger", is_open=False, style={"margin-top": "10px"}),

                            ],style={'margin-bottom': '5px'}),

                        ],
                        title='Academic data at the end of 1st sem.'
                    ),

                    # Menú desplegable 5: Academic data at the end of 2nd sem
                    dbc.AccordionItem(
                        [
                            # Fila 1
                            dbc.Row([

                                # Approved curricular units
                                dbc.Col([
                                        dbc.Label("Approved credits", html_for="acu_2nd_sem", size="sm"),
                                        dbc.Input(id="acu_2nd_sem", type="number", min=0, max=26, step=1, value=0, size="sm", persistence=True),
                                        dbc.FormFeedback("", type="invalid", id="acu_2nd_sem_fb"),
                                    ], width=5,
                                ),
                                
                                # Enrolled curricular units
                                dbc.Col([
                                        dbc.Label("Enrolled credits", html_for="ecu_2nd_sem", size="sm"),
                                        dbc.Input(id="ecu_2nd_sem", type="number", min=0, max=26, step=1, value=0, size="sm", persistence=True),
                                        dbc.FormFeedback("", type="invalid", id="ecu_2nd_sem_fb"),
                                    ], width=5,
                                ),

                                # Botón info
                                create_info_btn('2nd_sem_btn'),

                            ], justify="between", style={'margin-bottom': '5px'}),

                            # Fila 2
                            dbc.Row([

                                dbc.Alert(id="error-message-uc2", color="danger", is_open=False, style={"margin-top": "10px"}),

                            ],style={'margin-bottom': '5px'}),

                        ],  
                        title='Academic data at the end of 2nd sem.'
                    ),

            ],
            id="accordion",
            always_open=False
        )
    ], className='col-md-5', style={'padding-left': '40px', 'padding-right': '40px', 'padding-top': '10px'}),  


    # ------------------------------------------------------------------------------------------------------------------
    #                                           PANEL DE LA DERECHA: PREDICCIÓN
    # ------------------------------------------------------------------------------------------------------------------
    html.Div([
        html.H3("Probability of academic success"),
        html.P("The probability of academic success, calculated based on the parameters selected in the form, is:"),
        html.Div(
            dbc.Spinner(
                dcc.Graph(
                    id='gauge-graph',
                ),
                size="lg",  # Ajusta el tamaño del spinner según tus preferencias
                color="primary",  # Cambia el color del spinner si es necesario
            ),
            style={'height': '180px', 'overflow': 'auto', 'display': 'flex', 'justify-content': 'center', 'align-items': 'center'}
        ),
        html.Hr(),
        html.H4("Support Services based on Academic Success Prediction"),
        html.P("To provide additional support to the students, you can refer them to the following resources:"),
        dcc.Tabs([

        # Pestaña de apoyo a los estudiantes
        dcc.Tab(label='Student Support', children=[
            html.Div([
                html.Ul([
                    html.Li("Course Coordinator: Ensure smooth course operation and represent students' interests."),
                    html.Li("Mentors: 2nd-year student volunteers assist 1st-year students, aiding integration and offering subject support."),
                    html.Li("Student Ombudsperson: Mediates and facilitates resolution of administrative, pedagogical, or social conflicts/problems that students may face."),
                    html.Li("Student Associations: Represent and support students through academic associations, ensuring student well-being and assistance."),
                    html.Li("Support for Special Needs: Tailored support based on assessment, including attendance and evaluation adaptations."),
                ])
            ], style={"margin-top": "20px"})
        ]),

        # Pestaña de servicios de financiación
        dcc.Tab(label='Financial Services', children=[
            html.Div([
                html.Ul([
                    html.Li("Study Grants: Financial aid for needy students following specified regulations."),
                    html.Li("Mobility Grants: Available for eligible students, offering 1700 euros annually, through the BeOn Platform."),
                    html.Li("Discounted Amenities for Students: Affordable food and accommodation packages."),
                    html.Li("IPP Friend Program: Indirect social support through meal vouchers, food baskets, and housing cost relief."),
                    html.Li("Awards and Recognition: Scholarships and prizes for academic achievements."),
                ])
            ], style={"margin-top": "20px"})
        ])
    ])

    ], className='col-md-7', style={'padding-left': '40px', 'padding-right': '40px', 'padding-top': '10px'})
    
], className= 'row')



# ======================================================================================================================
#                                                LÓGICA DE LA APLICACIÓN
# ======================================================================================================================

# ----------------------------------------------------------------------------------------------------------------------
#                                                       GAUGE GRAPH
# ----------------------------------------------------------------------------------------------------------------------
@dash.callback(
    [Output('gauge-graph', 'figure'),
     Output('error-message-uc1', 'children'), # Nueva salida para el mensaje de error
     Output('error-message-uc1', 'is_open'),
     Output('error-message-uc2', 'children'),
     Output('error-message-uc2', 'is_open')],  
    [Input(f'dd_{param}', 'value') for param in dd_params.keys()] +
    [Input('acu_1st_sem', 'value'), Input('ecu_1st_sem', 'value'),
     Input('acu_2nd_sem', 'value'), Input('ecu_2nd_sem', 'value')]  # Nuevos inputs para UC 2do Sem
)
def display_selected_values(*values):
    """
    Esta función se encarga de actualizar el gráfico de gauge con la predicción del modelo.

    Args:
        *values: Valores de los parámetros del formulario.

    Returns:
        dcc.Graph: Gráfico de gauge con la predicción del modelo.
    """

    # Crear un diccionario para almacenar las evidencias
    evidence = {}

    # Evidencias de los dropdowns
    for param, value in zip(dd_params.keys(), values):
        if value is not None:

            correct_param_name = param_name_mapping[0].get(f'dd_{param}', f'Unknown parameter: {param}')
            evidence[correct_param_name] = value  # Agregar el parámetro al diccionario

    # Inicializar variables para errores y mensajes
    error_message_1, error_uc1_open = None, False
    error_message_2, error_uc2_open = None, False

    # Calculation of 1st Sem Curricular Units (Approved/Enrolled)
    error_message_1, error_uc1_open = calculate_ratio_and_errors(
        values[-4], values[-3], evidence, error_message_1, error_uc1_open, 'Curricular units 1st sem (approved/enrolled)'
    )

    # Calculation of 2nd Sem Curricular Units (Approved/Enrolled)
    error_message_2, error_uc2_open = calculate_ratio_and_errors(
        values[-2], values[-1], evidence, error_message_2, error_uc2_open, 'Curricular units 2nd sem (approved/enrolled)'
    )
    
    # Se predice la probabilidad de éxito académico
    inferencia = infer.query(["Target"], evidence=evidence) # Target: éxito académico

    # Tomar el valor de inferencia.values[0] redondearlo a 2 decimales y multiplicarlo por 100
    probability = round(inferencia.values[0] * 100, 2)

    # Crear el gráfico de gauge
    fig = go.Figure(go.Indicator(
        mode="gauge+number",
        value=probability,
        gauge={
            'axis': {'range': [None, 100], 'tickwidth': 1, 'tickcolor': 'darkblue'},
            'bar': {'color': '#29339b', 'thickness': 0.5},
            'steps': [
                {'range': [0, 25], 'color': '#FFA78E'},
                {'range': [25, 75], 'color': '#FFDF9C'},
                {'range': [75, 100], 'color': '#91DEBF'}
            ],
            'threshold': {'line': {'color': '#4CA98F', 'width': 4}, 'thickness': 0.75, 'value': 85},
            'borderwidth': 2, 
            'bordercolor': 'gray'
        }
    ))
    # Colores interesantes: 391463, 4F4789, 29339b,

    fig.update_layout(
        margin=dict(t=50, b=10),  # Ajusta el margen del gráfico
        height=180,  # Ajusta la altura de la figura
        width=500,  # Ajusta el ancho de la figura
        template=templates[0]  # Aplica el tema
    )

    return fig, error_message_1, error_uc1_open, error_message_2, error_uc2_open


# ----------------------------------------------------------------------------------------------------------------------
#                                                  VALIDACIÓN DE INPUTS
# ----------------------------------------------------------------------------------------------------------------------
@dash.callback([Output("acu_1st_sem", "invalid"), Output("acu_1st_sem_fb", "children"),
               Output("ecu_1st_sem", "invalid"), Output("ecu_1st_sem_fb", "children"),
               Output("acu_2nd_sem", "invalid"), Output("acu_2nd_sem_fb", "children"),
               Output("ecu_2nd_sem", "invalid"), Output("ecu_2nd_sem_fb", "children")],
               [Input("acu_1st_sem", "value"),
                Input("ecu_1st_sem", "value"),
                Input("acu_2nd_sem", "value"),
                Input("ecu_2nd_sem", "value")])
def update_input_validity_all(value_1er_sem_aprobadas, value_1er_sem_inscritas,
                              value_2do_sem_aprobadas,value_2do_sem_inscritas):
    """
    Esta función se encarga de validar los inputs del formulario.

    Args:
        value_1er_sem_aprobadas (int): Créditos aprobados 1er semestre.
        value_1er_sem_inscritas (int): Créditos inscritos 1er semestre.
        value_2do_sem_aprobadas (int): Créditos aprobados 2do semestre.
        value_2do_sem_inscritas (int): Créditos inscritos 2do semestre.

    Returns:
        list: Lista con los resultados de validación e información de retroalimentación.
    """
    
    # Lista para almacenar los resultados de validez e información de retroalimentación
    results = []
    
    # Luego, en la función de callback, puedes llamar a esta función para validar los créditos aprobados e inscritos
    is_invalid_acu_1st_sem, feedback_acu_1st_sem, is_invalid_ecu_1st_sem, feedback_ecu_1st_sem = validate_credit_inputs(
        value_1er_sem_aprobadas, value_1er_sem_inscritas
    )

    is_invalid_acu_2nd_sem, feedback_acu_2nd_sem, is_invalid_ecu_2nd_sem, feedback_ecu_2nd_sem = validate_credit_inputs(
        value_2do_sem_aprobadas,value_2do_sem_inscritas
    )

    # Agregar los resultados de validación e información de retroalimentación a la lista
    results.extend([
        is_invalid_acu_1st_sem, feedback_acu_1st_sem, is_invalid_ecu_1st_sem, feedback_ecu_1st_sem,
        is_invalid_acu_2nd_sem, feedback_acu_2nd_sem, is_invalid_ecu_2nd_sem, feedback_ecu_2nd_sem
    ])
    return results


# ----------------------------------------------------------------------------------------------------------------------
#                                                       LIMPIAR FORMULARIO
# ----------------------------------------------------------------------------------------------------------------------
@dash.callback(
    [Output(f'dd_{param}', 'value') for param in dd_params.keys()] +
    [Output('acu_1st_sem', 'value'), Output('ecu_1st_sem', 'value'),
     Output('acu_2nd_sem', 'value'), Output('ecu_2nd_sem', 'value')],
    [Input('clear-button', 'n_clicks')],
    prevent_initial_call=True
)
def clear_form(n_clicks):
    if n_clicks is not None and n_clicks > 0:
        
        # Clear the dropdowns
        dd_values = {f'dd_{param}': None for param in dd_params.keys()}
        
        # Clear the numeric fields
        numeric_values = {
            'acu_1st_sem': 0, 'ecu_1st_sem': 0,
            'acu_2nd_sem': 0, 'ecu_2nd_sem': 0
        }
        
        # Combine the dictionaries for the output values
        output_values = {**dd_values, **numeric_values}
        
        return [output_values[param] for param in output_values]
    else:
        raise PreventUpdate


# ----------------------------------------------------------------------------------------------------------------------
#                                                       PROGRESO
# ----------------------------------------------------------------------------------------------------------------------
@dash.callback(
    [Output('progress-bar', 'value'),Output('progress-bar', 'label')],
    [Input(f'dd_{param}', 'value') for param in dd_params.keys()] +
    [Input('acu_1st_sem', 'value'), Input('ecu_1st_sem', 'value'),
     Input('acu_2nd_sem', 'value'), Input('ecu_2nd_sem', 'value')]
)
def update_progress_bar(*values):
    # Calcula el progreso en función del número de valores ingresados
    total_params = len(dd_params) + 4  # Total de parámetros (dropdowns y créditos)
    
    # Cuenta el número de parámetros diligenciados en dropdowns
    filled_params = sum([value is not None for value in values])-4

    # Suma si los campos de créditos están correctamente diligenciados
    if ((values[-3] != 0) and (values[-4] is not None and values[-3] is not None)):
        if (values[-4] <= values[-3]):
            filled_params += 2
    if ((values[-1] != 0) and (values[-2] is not None and values[-1] is not None)):
        if (values[-2] <= values[-1]):
            filled_params += 2
        
    # Calcula el progreso con dos decimales
    progress = round(filled_params / total_params * 100)
    return progress, f"{progress} %" if progress >= 5 else ""